//************************************************************************
//Program name:
//Problem Desrciption:
//
//Name:AD LeFlore
//Date:Feb 27, 2009
//class:Csci 111
//************************************************************************
import java.text.*;
import java.awt.*;
import java.applet.*;
import java.awt.event.*;

//***********************************************************************
// class that handles mouse events
//
// keeping track of the mouse location and whether 
// or not a button is pressed
//***********************************************************************
class TheMouseHandler extends MouseAdapter implements MouseMotionListener
{
	ComputeFigure theCurrentApplet;

	public  TheMouseHandler(ComputeFigure x)
	{
		theCurrentApplet=x;
	}

	public void mouseEntered(MouseEvent e)
	{
		theCurrentApplet.x=0;
		theCurrentApplet.y=0;
		theCurrentApplet.width=0;
		theCurrentApplet.height=0;
		theCurrentApplet.repaint();	
		
	}
	
	public void mouseExited(MouseEvent e)
	{
		theCurrentApplet.x=0;
		theCurrentApplet.y=0;
		theCurrentApplet.width=0;
		theCurrentApplet.height=0;	
		theCurrentApplet.repaint();
	}

	public void mouseDragged(MouseEvent e)
	{
		theCurrentApplet.width=e.getX()-theCurrentApplet.x;
		theCurrentApplet.height=e.getY()-theCurrentApplet.y;
		
		theCurrentApplet.repaint();	
	}
	
	public void mouseMoved(MouseEvent e)
	{	
		//empty on purpose
	}

	public void mousePressed(MouseEvent e)
	{	
		theCurrentApplet.x=e.getX();
		theCurrentApplet.y=e.getY();	

		// to get x and y coordinates of a mouse event e one can also do
		// e.getPoint().x and e.getPoint().y
		// see the API java.awt.event.MouseEvent
	}
}

//******************************************************************
// class that handles which button has been pushed
//
//
//******************************************************************
class TheButtonHandler implements ActionListener
{
	
	ComputeFigure currentApplet;

	public void actionPerformed(ActionEvent e)
	{
		
		System.out.println(e.getActionCommand());
		currentApplet.figure=e.getActionCommand();
		
	}
	
	public TheButtonHandler(ComputeFigure x)
	{
		currentApplet=x;
	}

}

//*****************************************************************
public class ComputeFigure extends Applet
{
	//gui elements
	Button circleButton;
	Button rectangleButton;
	TheMouseHandler mouseManager;
	TheButtonHandler buttonManager;
	Panel holdbuttons;

	//instance variables
	int x,y,height,width,length;
	String figure;
	

	public void init()
	{
		//instantiate classes 
		mouseManager=new TheMouseHandler(this);
		buttonManager=new TheButtonHandler(this);
		holdbuttons=new Panel(); 
		circleButton=new Button("Circle");
		rectangleButton=new Button("Rectangle");
		
		//set initial default values
		figure="Circle";
		x=50;
		y=50;
		width=50;
		height=50;
		
 		addMouseMotionListener(mouseManager);
		addMouseListener(mouseManager);
		
		circleButton.addActionListener(buttonManager);
		circleButton.setBackground(Color.red);
		
		rectangleButton.addActionListener(buttonManager);
		rectangleButton.setBackground(Color.green);
		
		setLayout(new BorderLayout());
		holdbuttons.add(circleButton);
		holdbuttons.add(rectangleButton);
		add("North",holdbuttons);
		setBackground(Color.pink);
		
		
	}

	public void paint(Graphics g)
	{	
	NumberFormat nf = NumberFormat.getInstance();
	nf.setMaximumFractionDigits(2);
	double CenterPoint = x + (width/2);
	double CenterPoint2 = y + (height/2);

		if(figure.equals("Circle") )
		{
		
			g.drawOval(x,y,width,height);
			
			//put computations here for circle
			
			double r = width/2.0;
			double area = Math.PI * (r * r);
			double perimeter = Math.PI * 2 * r;

			g.drawString("Top Left Point = (" + nf.format(x)+","+nf.format(y)+")",0,470);
			g.drawString("Center Point = (" + nf.format(CenterPoint)+","+nf.format(CenterPoint2)+")",0,480);			
			g.drawString("Perimeter = "+nf.format(perimeter)+" units squared",0,490);			
			g.drawString("Area = " + nf.format(area)+"units",0,500);
			//end circle computations

		}
		else
		{
			g.drawRect(x,y,width,height);
			
			//put computations here for rectangle
			
			double area = height * width;
			double perimeter = (height * 2) + (width * 2);
			
			g.drawString("Top Left Point = (" + nf.format(x)+"," + nf.format(y)+")",0,470);
			g.drawString("Center Point = (" + nf.format(CenterPoint)+"," + nf.format(CenterPoint2)+")",0,480);			
			g.drawString("Perimeter = "+(perimeter)+" units squared",0,490);			
			g.drawString("Area = " +(area)+" units",0,500);

			//end Rectangle computations
		}
	}

}
